// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	aggregate "convercy/domain/aggregate"

	mock "github.com/stretchr/testify/mock"
)

// RegisteredCurrenciesRepository is an autogenerated mock type for the RegisteredCurrenciesRepository type
type RegisteredCurrenciesRepository struct {
	mock.Mock
}

// GetRegisteredCurrencies provides a mock function with given fields:
func (_m *RegisteredCurrenciesRepository) GetRegisteredCurrencies() (*aggregate.RegisteredCurrencies, error) {
	ret := _m.Called()

	var r0 *aggregate.RegisteredCurrencies
	var r1 error
	if rf, ok := ret.Get(0).(func() (*aggregate.RegisteredCurrencies, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *aggregate.RegisteredCurrencies); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.RegisteredCurrencies)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRegisteredCurrencies provides a mock function with given fields: registeredCurrencies
func (_m *RegisteredCurrenciesRepository) SaveRegisteredCurrencies(registeredCurrencies *aggregate.RegisteredCurrencies) error {
	ret := _m.Called(registeredCurrencies)

	var r0 error
	if rf, ok := ret.Get(0).(func(*aggregate.RegisteredCurrencies) error); ok {
		r0 = rf(registeredCurrencies)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRegisteredCurrenciesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisteredCurrenciesRepository creates a new instance of RegisteredCurrenciesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisteredCurrenciesRepository(t mockConstructorTestingTNewRegisteredCurrenciesRepository) *RegisteredCurrenciesRepository {
	mock := &RegisteredCurrenciesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
