// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	valueobject "convercy/domain/valueobject"
)

// CurrenciesRepository is an autogenerated mock type for the CurrenciesRepository type
type CurrenciesRepository struct {
	mock.Mock
}

// ListCurrencyCodes provides a mock function with given fields:
func (_m *CurrenciesRepository) ListCurrencyCodes() (valueobject.CurrencyCodes, error) {
	ret := _m.Called()

	var r0 valueobject.CurrencyCodes
	var r1 error
	if rf, ok := ret.Get(0).(func() (valueobject.CurrencyCodes, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() valueobject.CurrencyCodes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(valueobject.CurrencyCodes)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCurrenciesRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCurrenciesRepository creates a new instance of CurrenciesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCurrenciesRepository(t mockConstructorTestingTNewCurrenciesRepository) *CurrenciesRepository {
	mock := &CurrenciesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
