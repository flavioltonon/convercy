// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.6.1
// source: application/grpc/proto/v1/currency_registration_service.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *RegisterCurrencyRequest) Reset() {
	*x = RegisterCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCurrencyRequest) ProtoMessage() {}

func (x *RegisterCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCurrencyRequest.ProtoReflect.Descriptor instead.
func (*RegisterCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_application_grpc_proto_v1_currency_registration_service_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterCurrencyRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type RegisterCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Currency `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RegisterCurrencyResponse) Reset() {
	*x = RegisterCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCurrencyResponse) ProtoMessage() {}

func (x *RegisterCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCurrencyResponse.ProtoReflect.Descriptor instead.
func (*RegisterCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_application_grpc_proto_v1_currency_registration_service_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterCurrencyResponse) GetValue() *Currency {
	if x != nil {
		return x.Value
	}
	return nil
}

type UnregisterCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyId string `protobuf:"bytes,1,opt,name=currency_id,json=currencyId,proto3" json:"currency_id,omitempty"`
}

func (x *UnregisterCurrencyRequest) Reset() {
	*x = UnregisterCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterCurrencyRequest) ProtoMessage() {}

func (x *UnregisterCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UnregisterCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_application_grpc_proto_v1_currency_registration_service_proto_rawDescGZIP(), []int{2}
}

func (x *UnregisterCurrencyRequest) GetCurrencyId() string {
	if x != nil {
		return x.CurrencyId
	}
	return ""
}

type ListRegisteredCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Currency `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListRegisteredCurrenciesResponse) Reset() {
	*x = ListRegisteredCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegisteredCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegisteredCurrenciesResponse) ProtoMessage() {}

func (x *ListRegisteredCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegisteredCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*ListRegisteredCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_application_grpc_proto_v1_currency_registration_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListRegisteredCurrenciesResponse) GetValues() []*Currency {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_application_grpc_proto_v1_currency_registration_service_proto protoreflect.FileDescriptor

var file_application_grpc_proto_v1_currency_registration_service_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x28, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x17, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3e, 0x0a, 0x18, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3c, 0x0a, 0x19, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x32, 0x93, 0x02, 0x0a, 0x1b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4d, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x24, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_application_grpc_proto_v1_currency_registration_service_proto_rawDescOnce sync.Once
	file_application_grpc_proto_v1_currency_registration_service_proto_rawDescData = file_application_grpc_proto_v1_currency_registration_service_proto_rawDesc
)

func file_application_grpc_proto_v1_currency_registration_service_proto_rawDescGZIP() []byte {
	file_application_grpc_proto_v1_currency_registration_service_proto_rawDescOnce.Do(func() {
		file_application_grpc_proto_v1_currency_registration_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_application_grpc_proto_v1_currency_registration_service_proto_rawDescData)
	})
	return file_application_grpc_proto_v1_currency_registration_service_proto_rawDescData
}

var file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_application_grpc_proto_v1_currency_registration_service_proto_goTypes = []interface{}{
	(*RegisterCurrencyRequest)(nil),          // 0: v1.RegisterCurrencyRequest
	(*RegisterCurrencyResponse)(nil),         // 1: v1.RegisterCurrencyResponse
	(*UnregisterCurrencyRequest)(nil),        // 2: v1.UnregisterCurrencyRequest
	(*ListRegisteredCurrenciesResponse)(nil), // 3: v1.ListRegisteredCurrenciesResponse
	(*Currency)(nil),                         // 4: v1.Currency
	(*empty.Empty)(nil),                      // 5: google.protobuf.Empty
}
var file_application_grpc_proto_v1_currency_registration_service_proto_depIdxs = []int32{
	4, // 0: v1.RegisterCurrencyResponse.value:type_name -> v1.Currency
	4, // 1: v1.ListRegisteredCurrenciesResponse.values:type_name -> v1.Currency
	0, // 2: v1.CurrencyRegistrationService.RegisterCurrency:input_type -> v1.RegisterCurrencyRequest
	2, // 3: v1.CurrencyRegistrationService.UnregisterCurrency:input_type -> v1.UnregisterCurrencyRequest
	5, // 4: v1.CurrencyRegistrationService.ListRegisteredCurrencies:input_type -> google.protobuf.Empty
	1, // 5: v1.CurrencyRegistrationService.RegisterCurrency:output_type -> v1.RegisterCurrencyResponse
	5, // 6: v1.CurrencyRegistrationService.UnregisterCurrency:output_type -> google.protobuf.Empty
	3, // 7: v1.CurrencyRegistrationService.ListRegisteredCurrencies:output_type -> v1.ListRegisteredCurrenciesResponse
	5, // [5:8] is the sub-list for method output_type
	2, // [2:5] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_application_grpc_proto_v1_currency_registration_service_proto_init() }
func file_application_grpc_proto_v1_currency_registration_service_proto_init() {
	if File_application_grpc_proto_v1_currency_registration_service_proto != nil {
		return
	}
	file_application_grpc_proto_v1_currency_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegisteredCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_application_grpc_proto_v1_currency_registration_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_application_grpc_proto_v1_currency_registration_service_proto_goTypes,
		DependencyIndexes: file_application_grpc_proto_v1_currency_registration_service_proto_depIdxs,
		MessageInfos:      file_application_grpc_proto_v1_currency_registration_service_proto_msgTypes,
	}.Build()
	File_application_grpc_proto_v1_currency_registration_service_proto = out.File
	file_application_grpc_proto_v1_currency_registration_service_proto_rawDesc = nil
	file_application_grpc_proto_v1_currency_registration_service_proto_goTypes = nil
	file_application_grpc_proto_v1_currency_registration_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CurrencyRegistrationServiceClient is the client API for CurrencyRegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CurrencyRegistrationServiceClient interface {
	RegisterCurrency(ctx context.Context, in *RegisterCurrencyRequest, opts ...grpc.CallOption) (*RegisterCurrencyResponse, error)
	UnregisterCurrency(ctx context.Context, in *UnregisterCurrencyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListRegisteredCurrencies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListRegisteredCurrenciesResponse, error)
}

type currencyRegistrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyRegistrationServiceClient(cc grpc.ClientConnInterface) CurrencyRegistrationServiceClient {
	return &currencyRegistrationServiceClient{cc}
}

func (c *currencyRegistrationServiceClient) RegisterCurrency(ctx context.Context, in *RegisterCurrencyRequest, opts ...grpc.CallOption) (*RegisterCurrencyResponse, error) {
	out := new(RegisterCurrencyResponse)
	err := c.cc.Invoke(ctx, "/v1.CurrencyRegistrationService/RegisterCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRegistrationServiceClient) UnregisterCurrency(ctx context.Context, in *UnregisterCurrencyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.CurrencyRegistrationService/UnregisterCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyRegistrationServiceClient) ListRegisteredCurrencies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListRegisteredCurrenciesResponse, error) {
	out := new(ListRegisteredCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/v1.CurrencyRegistrationService/ListRegisteredCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyRegistrationServiceServer is the server API for CurrencyRegistrationService service.
type CurrencyRegistrationServiceServer interface {
	RegisterCurrency(context.Context, *RegisterCurrencyRequest) (*RegisterCurrencyResponse, error)
	UnregisterCurrency(context.Context, *UnregisterCurrencyRequest) (*empty.Empty, error)
	ListRegisteredCurrencies(context.Context, *empty.Empty) (*ListRegisteredCurrenciesResponse, error)
}

// UnimplementedCurrencyRegistrationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCurrencyRegistrationServiceServer struct {
}

func (*UnimplementedCurrencyRegistrationServiceServer) RegisterCurrency(context.Context, *RegisterCurrencyRequest) (*RegisterCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCurrency not implemented")
}
func (*UnimplementedCurrencyRegistrationServiceServer) UnregisterCurrency(context.Context, *UnregisterCurrencyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterCurrency not implemented")
}
func (*UnimplementedCurrencyRegistrationServiceServer) ListRegisteredCurrencies(context.Context, *empty.Empty) (*ListRegisteredCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegisteredCurrencies not implemented")
}

func RegisterCurrencyRegistrationServiceServer(s *grpc.Server, srv CurrencyRegistrationServiceServer) {
	s.RegisterService(&_CurrencyRegistrationService_serviceDesc, srv)
}

func _CurrencyRegistrationService_RegisterCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRegistrationServiceServer).RegisterCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CurrencyRegistrationService/RegisterCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRegistrationServiceServer).RegisterCurrency(ctx, req.(*RegisterCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRegistrationService_UnregisterCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRegistrationServiceServer).UnregisterCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CurrencyRegistrationService/UnregisterCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRegistrationServiceServer).UnregisterCurrency(ctx, req.(*UnregisterCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyRegistrationService_ListRegisteredCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyRegistrationServiceServer).ListRegisteredCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CurrencyRegistrationService/ListRegisteredCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyRegistrationServiceServer).ListRegisteredCurrencies(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrencyRegistrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CurrencyRegistrationService",
	HandlerType: (*CurrencyRegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCurrency",
			Handler:    _CurrencyRegistrationService_RegisterCurrency_Handler,
		},
		{
			MethodName: "UnregisterCurrency",
			Handler:    _CurrencyRegistrationService_UnregisterCurrency_Handler,
		},
		{
			MethodName: "ListRegisteredCurrencies",
			Handler:    _CurrencyRegistrationService_ListRegisteredCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/grpc/proto/v1/currency_registration_service.proto",
}
